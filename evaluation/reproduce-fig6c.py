"""
Reproduction script for Figure 6c in the paper.

Please note that the input data for this script is only a small subset (100 requests) of the original data (2000 requests) used 
in the paper. This is for the purpose of demonstration and quick verification of the results. As a result, the latency would be
lower than the original figure due to less average queuing latency. 

The original data can be generated by modifying the parameters in the script.
"""

import asyncio
import json
import os

from server import start_server, stop_server
from benchmark import run_test, prepare_real_test
from illustrator import draw_one_rl_diagram

# Tweak hyperparameters here:

vllm_rates = [0.2, 0.4, 0.5, 0.6]
ours_rates = [2.5, 3.9, 5.5, 8.1]
# Rates of requests per second, reduce the number of elements in the list to speed up the evaluation process.


cur_dir = os.path.dirname(os.path.realpath(__file__))
with open(f"{cur_dir}/configs/config-a10-8b.json", "r") as f:
    config = json.load(f)


async def one_round(server_name: str):
    start_server(server_name, config)
    try:
        # Change the rate argument (in reqs/s) to other values to see more results
        # Feel free to comment out some of the following lines to reduce running time
        if server_name == "ours":
            for rate in ours_rates:
                await run_test(*prepare_real_test("osc", config, server_name), rate=rate)
        if server_name == "vllm":
            for rate in vllm_rates:
                await run_test(*prepare_real_test("osc", config, server_name), rate=rate)
    finally:
        stop_server()
    await asyncio.sleep(5)

async def server(server_name: str):
    start_server(server_name, config)
    try:
        print(f"Server {server_name} started, running indefinitely...")
        print("Press Ctrl+C to stop the server")
        
        # 死循环，让服务器持续运行
        while True:
            await asyncio.sleep(1)  # 每秒检查一次，避免CPU占用过高
            
    except KeyboardInterrupt:
        print("Received interrupt signal, stopping server...")
    finally:
        stop_server()
        print("Server stopped")

async def main():
    # await one_round("vllm")
    await one_round("ours")
    # await server("ours")  # 启动服务器并保持运行


if __name__ == "__main__":
    asyncio.run(main())
    # draw_one_rl_diagram(
    #     title="fig6c",
    #     data_name="osc",
    #     sys_file_names=["vllm", "ours"],
    #     sys_legend_names=["VLLM", "Ours"],
    #     rate_lists=[vllm_rates, ours_rates],
    #     ylim=2,
    #     markers=["o", "x"],
    #     set_ylabel=True
    # )
    draw_one_rl_diagram(
        title="fig6c2",
        data_name="osc",
        sys_file_names=["ours"],
        sys_legend_names=["Ours"],
        rate_lists=[ours_rates],
        ylim=2,
        markers=["x"],
        set_ylabel=True
    )